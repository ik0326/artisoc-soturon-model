{"modelId":"dRg4FLrjRC6EG2IsN0syEA","revision":"editing","title":"エレベータ効率化モデル","description":"卒論で使用するためのモデルです。","tags":[],"model":{"universe":{"description":"ユニバース","history_size":0,"variables":{"num_elevator":{"default":"","description":"エレベータの数"},"user_set":{"default":"","description":"ユーザの集合"},"call_floor":{"default":"","description":"呼び出し中の階"},"elevator_capacity":{"default":"","description":"エレベータの最大収容人数"},"outputData":{"default":"","description":"エレベータの動作を可視化するために使用するデータ。"}},"source":"def univ_init(self):\n    NE = Universe.num_elevator #エレベータの数をインターフェースから取得\n    # Universe.elevator_capacity = 30 # エレベータの最大収容人数を設定\n    \n    # 呼び出し中階の初期化\n    Universe.call_floor = set()\n    #エレベータの初期X座標を計算\n    E_X_List = [2*i+1 for i in range(NE)]\n    \n    #エレベータを生成\n    create_agt(Universe.tower.elevator, num=NE)\n    \n    #エレベータの初期座標を設定\n    agt_elevator = make_agtset(agttype=Universe.tower.elevator)\n    for x, elevator in zip(E_X_List, agt_elevator):\n        elevator.x = x\n        elevator.capacity = Universe.elevator_capacity\n        \n    # ユーザの初期位置を設定\n    create_agt(Universe.tower.user, num=1)\n\n    # ユーザの集合を作成\n    Universe.user_set = make_agtset(agttype=Universe.tower.user)\n\n    # Universe.outputData = list()\n    # Universe.outputData = agt_elevator\n        \n\ndef univ_step_begin(self):\n    \n    # ユーザは1/4の確率で1~6人出現する\n    if randint(1,8) == 1:\n        n = randint(1,4)\n        users = create_agt(Universe.tower.user, num=n)\n        # 更新された場合、Universe.user_setを更新する\n        # ユーザの集合を更新\n        if n <= 1:\n            Universe.user_set.add(users)\n        else:\n            for user in users:\n                Universe.user_set.add(user)\n    \n\n    # 待機Userが誰もいなければ、エレベータは動かない\n    # Userエージェントの個数を取得\n   \n    # Elevatorを全取得\n    # もし、エレベータが稼働中でなければ、エレベータを待機状態にする\n    elevator_set = make_agtset(agttype=Universe.tower.elevator)\n    for elevator in elevator_set:\n        if (len(Universe.user_set) <= 0 and len(elevator.riding_user) <= 0):\n            elevator.state = \"stop\"\n        else:\n            elevator.state = \"moving\"\n            \n    # データ用エレベータ階記録\n    # for one in elevator_set:\n    #     Universe.outputData += [one.y, one.y, one.y, one.y]\n    # Universe.outputData = elevator_set\n    \ndef univ_step_end(self):\n    # エレベータの状態を取得\n    elevator_set = make_agtset(agttype=Universe.tower.elevator)\n  \n \n    # User agentsの共通処理\n    # 1. 乗っているエレベータが目的階に到着した場合、降りる。（消滅）また、user_setから自身のIDを削除\n    # 2. その階に待っている人がいる場合、かつ、エレベータのキャパシティに到達していない場合、乗車。 // Elevator側で設定\n    # 2-2 行き先を登録\n    \n    # 乗車条件\n    # 1. エレベータのdirectionとUserのdirectionが同じである。　ただし、エレベータの乗員が０の時、方向に関係なく乗れる\n    # elevatorの呼び出しフラグがTrueのとき、呼び出した本人がいる会の人は乗れるが、それ以外の階の人たちはスキップされる。\n    \n    # 1\n    for elevator in elevator_set:\n        for user in elevator.riding_user.copy():\n            if user.state == 'moving' and user.target_place == elevator.y:\n                # 降車\n                elevator.riding_user.discard(user)\n                kill_agt(user)\n                \n                # 到着階を行き先登録リストから削除\n                elevator.user_destinations.discard(elevator.y)\n                print(f'{user.y}で降車')\n    # 2\n    for elevator in elevator_set:\n        for user in Universe.user_set.copy():\n            # 乗車\n            # 最初の乗車者の場合、次のディレクションを確定する。\n            if (\n                len(elevator.riding_user) <= 0 and \n                elevator.y == user.y\n            ):\n                # user state update\n                user.state = 'moving'\n                elevator.call_flag = False\n                \n                # elevator settings\n                # 行き先登録\n                elevator.user_destinations.add(user.target_place) \n                \n                # エレベータにUserを乗せる\n                elevator.riding_user.add(user)\n                Universe.user_set.discard(user)\n                \n                # 次の方向を確定\n                if elevator.y > user.target_place:\n                    elevator.ud_flag = False # 下\n                else:\n                    elevator.ud_flag = True # 上\n                \n                # 方向を確定\n                elevator.direction = elevator.UP_DOWN[elevator.ud_flag]\n                \n            elif (\n                not elevator.call_flag and\n                elevator.direction == user.direction and \n                len(elevator.riding_user) <= elevator.capacity and\n                elevator.y == user.y\n            ):\n                # 2-2 行き先登録\n                # user settings\n                user.state = 'moving' # ステートを変更\n                \n                # elevator settings\n                elevator.user_destinations.add(user.target_place)\n                \n                # ユーザを乗せる\n                elevator.riding_user.add(user)\n                Universe.user_set.discard(user)\n            \n                \n    \n    # ---------------------------------------------------------- #\n    # Elevator agentsの共通処理 ※　Userの移動も含む。\n    # ElevatorとUserを前進させる\n        # self.forward_direction_sqgrid(self.direction,1)\n    # - stateが \"moving\"のとき、そのまま前進させる。\n    # - state が stopのとき、何も行わない\n    \n    # -- User の行動方法→ ridingListに入っているユーザを取得し、それらを移動させる。\n\n    for elevator in elevator_set:\n        if elevator.state == 'moving':\n            # エレベータを前進\n            elevator.forward_direction_sqgrid(elevator.direction,1)\n            for user in elevator.riding_user:\n                user.forward_direction_sqgrid(user.direction, 1)\n                \ndef univ_finish(self):\n    \n    # 重複を防ぐためには、乗車時にuser_setから対象のエージェントを削除し、その代わりに、Elevator側でそのユーザ情報を持っておく必要がある。\n    \n    # 今後、データを吐き出す。\n    # with open('sample.csv', 'w', encoding='utf-8') as file:\n    #     file.write(str(\",\".join(map(str,Universe.outputData))))\n   \n    pass\n\n","spaces":{"tower":{"type":"squareGrid","description":"コクーンタワー","history_size":0,"width":13,"height":36,"is_loop":false,"layer_count":1,"agents":{"user":{"description":"ユーザ","history_size":0,"variables":{"id":{"default":"0","description":"ID"},"x":{"default":"0","description":"空間内のX座標"},"y":{"default":"0","description":"空間内のY座標"},"direction":{"default":"0","description":"方向"},"layer":{"default":"0","description":"空間内のレイヤ番号"},"target_place":{"default":"","description":"降りる地点"},"color":{"default":"","description":"色"},"state":{"default":"","description":"現在の状態"}},"source":"def agt_init(self):\n    self.y = randint(2, get_height_space(Universe.tower)-1)\n    self.x = randint(0,get_width_space(Universe.tower)-1)\n    # 初期ステート\n    self.state = 'wait'\n    self.color = COLOR_RED\n\n    # 目的階を現在階以外でランダムに設定\n    numbers = list(range(0, get_height_space(Universe.tower)-1))\n    random_number = random.choice([number for number in numbers if number != self.y])\n    self.target_place = random_number\n   \n    # ディレクションの初期：左向き\n    # 移動中のエージェントの向き\n    if self.y > self.target_place:\n        self.direction = 6\n    else:\n        self.direction = 2\n\n    \n    # 色の指定について\n    # 乗車時：青\n    # 待機時：赤\n    # 目的地到着時：エージェント削除\n\ndef agt_step(self):\n  if self.state == 'moving':\n      self.color = COLOR_BLUE\n  else:\n      self.color = COLOR_RED\n\n"},"elevator":{"description":"エレベータ","history_size":0,"variables":{"id":{"default":"0","description":"ID"},"x":{"default":"0","description":"空間内のX座標"},"y":{"default":"0","description":"空間内のY座標"},"direction":{"default":"0","description":"方向"},"layer":{"default":"0","description":"空間内のレイヤ番号"},"ud_flag":{"default":"","description":"True: UP, False: Down"},"UP_DOWN":{"default":"","description":"アップダウンリスト"},"user_destinations":{"default":"","description":"ユーザが行きたい階を登録"},"capacity":{"default":"","description":"最大収容人数"},"color":{"default":"","description":"色"},"state":{"default":"","description":"エレベータの稼働状況を表す"},"call_flag":{"default":"","description":"呼び出しフラグ"},"riding_user":{"default":"","description":"乗車中のユーザ"}},"source":"def agt_init(self):\n    self.y = randint(0, get_height_space(Universe.tower)-1)\n    self.color = COLOR_BLUE # 動いている時、青\n    self.direction = 2 # 上:2 下: 6\n    self.ud_flag = True\n    self.UP_DOWN = [6,2] # True: UP, False: Down\n    # 収容人数\n    self.capacity = 30\n    # 行き先階登録\n    self.user_destinations = set()\n    # 状態\n    self.state = \"stop\"\n    self.call_flag = False\n    self.riding_user = set()\n    \ndef agt_step(self):\n    \n    # エレベータに誰も乗っていない時 and 待機者がいる時 \n    if (\n        not self.call_flag and\n        len(self.user_destinations) <= 0 and \n        len(self.riding_user) <= 0 and\n        len(Universe.user_set) > 0\n    ):\n       \n        \n        one = randchoice(Universe.user_set) \n        \n        Universe.call_floor.add(one.y)\n        self.call_flag = True\n        self.state = \"moving\"\n        print('呼び出し先', one.y)\n        # 次に進む方向を確定する\n      \n        if self.y > one.y:\n            self.ud_flag = False\n        else:\n            self.ud_flag = True\n    #-------------------------------------------------#\n    # ステップ終了時、共通処理\n    # 方向をセットする\n    if self.state == \"moving\":\n        self.color = COLOR_BLUE\n    else:\n        self.color = COLOR_RED\n    \n\n    self.direction = self.UP_DOWN[self.ud_flag]\n         \n    \n    print(\"***********************************\")\n    print(\"進行中:\")\n    print(\"乗車人数\", len(self.riding_user))\n    print(\"***********************************\")\n  "}},"variables":{},"networks":{}}},"agents":{}},"modules":{},"charts":[{"id":"display_value:0","type":"display_value","name":"ユーザ","options":{"elements":[]}}],"maps":[{"id":"map:0","name":"タワー","space":"tower","layer":0,"x_axis":{"min":0,"max":13},"y_axis":{"min":0,"max":36},"legend":true,"background_image_type":"fixed","background_image":null,"background_image_expression":"","background_color":[255,255,255],"ruled_line":false,"map_type":"chess","origin":"LL","elements":[{"name":"エレベータ","marker":"square","type":"agent","picture":null,"color":{"type":"expression","color":[69,143,240],"gradation":{"min":0,"max":100,"min_color":[0,0,0],"max_color":[0,0,0],"expression":""},"expression":"self.color"},"agent_type":"elevator","scale":{"type":"fixed","value":1,"expression":null},"transparency":{"type":"fixed","value":0,"expression":null},"info":{"variable":null,"decimal_place":0,"color":[0,0,0]},"line":{"variable":null,"line_type":"solid","head_type":"none","color":[0,0,0]},"id":1}]},{"id":"map:1","name":"利用者","space":"tower","layer":0,"x_axis":{"min":0,"max":13},"y_axis":{"min":0,"max":36},"legend":true,"background_image_type":"fixed","background_image":null,"background_image_expression":"","background_color":[255,255,255],"ruled_line":false,"map_type":"chess","origin":"LL","elements":[{"name":"ユーザ","marker":"circle","type":"agent","picture":null,"color":{"type":"expression","color":[0,0,0],"gradation":{"min":0,"max":100,"min_color":[0,0,0],"max_color":[0,0,0],"expression":""},"expression":"self.color"},"agent_type":"user","scale":{"type":"fixed","value":1,"expression":null},"transparency":{"type":"fixed","value":0,"expression":null},"info":{"variable":null,"decimal_place":0,"color":[0,0,0]},"line":{"variable":null,"line_type":"solid","head_type":"none","color":[0,0,0]},"id":0,"marker_image_expression":null}]}],"inputs":[{"id":"slide_bar:0","name":"エレベータの数","type":"integer","control":"slide_bar","options":{"variable":"num_elevator","min":1,"max":6,"step":1,"default":"1"}},{"id":"slide_bar:1","name":"１台あたりの最大収容人数","type":"integer","control":"slide_bar","options":{"variable":"elevator_capacity","min":1,"max":30,"step":1,"default":"10"}}],"files":{},"simulation":{"end_conditions":{"steps":5000,"duration_sec":600,"expression":null},"step_delay_default":0,"step_delay_max":1000,"random_seed":null,"server_settings":{"steps":1},"using_sharedfiles":[]}}}