{
  "modelId": "3tiIsWRcQp2LEJy_qfQ5fA",
  "revision": "editing",
  "title": "エレベータ効率化モデル2024/01/04",
  "description": "卒論で使用するためのモデルです。",
  "tags": [],
  "model": {
    "universe": {
      "description": "ユニバース",
      "history_size": 0,
      "variables": {
        "num_elevator": { "default": "", "description": "エレベータの数" },
        "user_set": { "default": "", "description": "ユーザの集合" },
        "elevator_capacity": {
          "default": "",
          "description": "エレベータの最大収容人数"
        },
        "outputData": {
          "default": "",
          "description": "エレベータの動作を可視化するために使用するデータ。"
        },
        "view_data": { "default": "", "description": "" },
        "people": { "default": "", "description": "" },
        "ave_wait_step": { "default": "", "description": "平均待機時間" },
        "floors_wait_step": { "default": "", "description": "" },
        "view_floors_wait_step": { "default": "", "description": "" },
        "elevator_ride_efficiency_dict": {
          "default": "",
          "description": "エレベータの運行効率に関するデータリスト"
        },
        "continuous_operating_step_dict": {
          "default": "",
          "description": "連続で進むことができたステップ数"
        },
        "continuous_operating_step_show": {
          "default": "",
          "description": "見える化用"
        },
        "agent_prob": {
          "default": "",
          "description": "エージェントが出現する確率"
        },
        "leave_count": {
          "default": "",
          "description": "痺れをきたして去った人数"
        },
        "compromise_count": { "default": "", "description": "妥協した人数" },
        "compromise_ratio": { "default": "", "description": "妥協割合" },
        "UP": { "default": "", "description": "妥協上" },
        "DOWN": { "default": "", "description": "妥協下" },
        "user_bias": { "description": "出現偏り", "default": "" },
        "bios_late": { "description": "偏りの確率", "default": "" }
      },
      "source": "def univ_init(self):\n    NE = Universe.num_elevator #エレベータの数をインターフェースから取得\n    # Universe.elevator_capacity = 30 # エレベータの最大収容人数を設定\n    \n    #エレベータの初期X座標を計算\n    E_X_List = [2*i+1 for i in range(NE)]\n    \n\n    # 可視化データ\n    Universe.view_data = [0] * 6\n    Universe.ave_wait_step = [0]\n    Universe.floors_wait_step = {i:[0] for i in range(get_height_space(Universe.tower))}\n    Universe.view_floors_wait_step = {i:0 for i in range(get_height_space(Universe.tower))}\n    Universe.elevator_ride_efficiency_dict = {i:0 for i in range(1, NE + 1)}\n    Universe.continuous_operating_step_dict = {i:[] for i in range(1, NE + 1)}\n    Universe.continuous_operating_step_show = {i:0 for i in range(1, NE + 1)}\n    Universe.compromise_count = 0\n    Universe.leave_count = 0\n    \n    #エレベータを生成\n    create_agt(Universe.tower.elevator, num=NE)\n    \n    #エレベータの初期座標を設定\n    agt_elevator = make_agtset(agttype=Universe.tower.elevator)\n    for x, elevator in zip(E_X_List, agt_elevator):\n        elevator.x = x\n        elevator.capacity = Universe.elevator_capacity\n        \n    # ユーザの初期位置を設定\n    create_agt(Universe.tower.user, num=1)\n\n    # ユーザの集合を作成\n    Universe.user_set = make_agtset(agttype=Universe.tower.user)\n        \n\ndef univ_step_begin(self):\n    \n    # ユーザは1/4の確率で1~6人出現する\n    if randint(1,100) <= Universe.agent_prob:\n        n = randint(1,Universe.people)\n        users = create_agt(Universe.tower.user, num=n)\n        # 更新された場合、Universe.user_setを更新する\n        # ユーザの集合を更新\n        if n <= 1:\n            Universe.user_set.add(users)\n        else:\n            for user in users:\n                Universe.user_set.add(user)\n    \n\n    # 待機Userが誰もいなければ、エレベータは動かない\n    # Userエージェントの個数を取得\n   \n    # Elevatorを全取得\n    # もし、エレベータが稼働中でなければ、エレベータを待機状態にする\n    elevator_set = make_agtset(agttype=Universe.tower.elevator)\n    for elevator in elevator_set:\n        if (len(Universe.user_set) <= 0 and len(elevator.riding_user) <= 0):\n            elevator.state = \"stop\"\n        else:\n            elevator.state = \"moving\"\n        \n        # エレベータの運行効率に関するデータを更新する\n        # 時間を５にする。\n        Universe.elevator_ride_efficiency_dict[elevator.id] = (count_step() + elevator.stop_count * 10)\n   \n    \ndef univ_step_end(self):\n    # エレベータの状態を取得\n    elevator_set = make_agtset(agttype=Universe.tower.elevator)\n    \n    # 可視化用\n    for i, v in enumerate(elevator_set):\n        Universe.view_data[i] = v.y\n  \n \n    # User agentsの共通処理\n    # 1. 乗っているエレベータが目的階に到着した場合、降りる。（消滅）また、user_setから自身のIDを削除\n    # 2. その階に待っている人がいる場合、かつ、エレベータのキャパシティに到達していない場合、乗車。 // Elevator側で設定\n    # 2-2 行き先を登録\n    \n    # 乗車条件\n    # 1. エレベータのdirectionとUserのdirectionが同じである。　ただし、エレベータの乗員が０の時、方向に関係なく乗れる\n    # elevatorの呼び出しフラグがTrueのとき、呼び出した本人がいる会の人は乗れるが、それ以外の階の人たちはスキップされる。\n    \n    # 1\n    for elevator in elevator_set:\n        for user in elevator.riding_user.copy():\n            if user.state == 'moving' and user.target_place == elevator.y:\n                # 降車\n                elevator.color = COLOR_GREEN\n                elevator.stop_count += 1\n                elevator.continuous_flag = False\n                elevator.riding_user.discard(user)\n                del_agt(user)\n                \n                # 到着階を行き先登録リストから削除\n                elevator.user_destinations.discard(elevator.y)\n                \n    # 2\n    for elevator in elevator_set:\n        temp_flag = False\n        for user in Universe.user_set.copy():\n            # 乗車\n            # 最初の乗車者の場合、次のディレクションを確定する。\n            if (\n                elevator.call_flag and\n                len(elevator.riding_user) <= 0 and \n                elevator.y == user.y\n            ):\n                # user state update\n                user.state = 'moving'\n                elevator.call_flag = False\n                elevator.stop_count += 1\n                elevator.continuous_flag = False\n                \n                # elevator settings\n                # 行き先登録\n                elevator.user_destinations.add(user.target_place) \n                elevator.color  = COLOR_GREEN\n                # エレベータにUserを乗せる\n                \n                Universe.ave_wait_step.append(user.wait_step)\n                Universe.floors_wait_step[user.first_place].append(user.wait_step)\n                if count_step() % 100 == 0:\n                    Universe.floors_wait_step[user.first_place] = [sum(Universe.floors_wait_step) / len(Universe.floors_wait_step)]\n                elevator.riding_user.add(user)\n                Universe.user_set.discard(user)\n                \n                # 次の方向を確定\n                if elevator.y > user.target_place:\n                    elevator.ud_flag = False # 下\n                else:\n                    elevator.ud_flag = True # 上\n                \n                # 方向を確定\n                elevator.direction = elevator.UP_DOWN[elevator.ud_flag]\n                \n            elif (\n                not elevator.call_flag and\n                elevator.direction == user.direction and \n                len(elevator.riding_user) <= elevator.capacity and\n                elevator.y == user.y\n            ):\n                # 2-2 行き先登録\n                # user settings\n                user.state = 'moving' # ステートを変更\n                \n                # elevator settings\n                elevator.user_destinations.add(user.target_place)\n                elevator.color = COLOR_GREEN\n                elevator.stop_count += 1\n                \n                elevator.continuous_flag = False\n                \n                # ユーザを乗せる\n                Universe.floors_wait_step[user.first_place].append(user.wait_step)\n                if count_step() % 100 == 0:\n                   Universe.floors_wait_step[user.first_place] = [sum(Universe.floors_wait_step) / len(Universe.floors_wait_step)]\n                Universe.ave_wait_step.append(user.wait_step)\n                elevator.riding_user.add(user)\n                Universe.user_set.discard(user)\n        \n                \n        if elevator.continuous_flag:\n            elevator.continuous_operating_step += 1\n            \n        for i in range(get_height_space(Universe.tower)):\n            a = Universe.floors_wait_step[i]\n            b = sum(a) / len(a)\n            Universe.view_floors_wait_step[i] = b\n    \n    # ---------------------------------------------------------- #\n    # Elevator agentsの共通処理 ※　Userの移動も含む。\n    # ElevatorとUserを前進させる\n        # self.forward_direction_sqgrid(self.direction,1)\n    # - stateが \"moving\"のとき、そのまま前進させる。\n    # - state が stopのとき、何も行わない\n    \n    # -- User の行動方法→ ridingListに入っているユーザを取得し、それらを移動させる。\n\n    for elevator in elevator_set:\n        if elevator.state == 'moving':\n            # エレベータを前進\n            elevator.forward_direction_sqgrid(elevator.direction,1)\n            for user in elevator.riding_user:\n                user.forward_direction_sqgrid(user.direction, 1)\n        \n        # データ出力用\n        if not elevator.continuous_flag:\n            Universe.continuous_operating_step_dict[elevator.id].append(elevator.continuous_operating_step)\n            data = Universe.continuous_operating_step_dict[elevator.id]\n            Universe.continuous_operating_step_show[elevator.id] = sum(data) / len(data)\n            elevator.continuous_operating_step = 0\n            elevator.continuous_flag = True\n            if count_step() % 100 == 0:\n                Universe.continuous_operating_step_dict[elevator.id] = [Universe.continuous_operating_step_show[elevator.id]]\ndef univ_finish(self):\n    \n    # 出力するCSVのカラム群\n    # 平均待ち時間\n    # 階ごとの平均待ち時間\n    # エレベータごとの乗車効率\n    # エレベータごとの平均継続ステップ\n    \n    import csv\n    elevator_efficiency_header = [f'エレベータ{i}の乗車効率' for i in range(1,Universe.num_elevator+1)]\n    elevator_ave_header = [f'エレベータ{i}の平均継続ステップ' for i in range(1, Universe.num_elevator+1)]\n    header = [  '平均待ち時間',\n                '1階の平均待ち時間',\n                '2階の平均待ち時間',\n                '3階の平均待ち時間',\n                '4階の平均待ち時間',\n                '5階の平均待ち時間',\n                '6階の平均待ち時間',\n                '7階の平均待ち時間',\n                '8階の平均待ち時間',\n                '9階の平均待ち時間',\n                '10階の平均待ち時間',\n                '11階の平均待ち時間',\n                '12階の平均待ち時間',\n                '13階の平均待ち時間',\n                '14階の平均待ち時間',\n                '15階の平均待ち時間',\n                '16階の平均待ち時間',\n                '17階の平均待ち時間',\n                '18階の平均待ち時間',\n                '19階の平均待ち時間',\n                '20階の平均待ち時間',\n                '21階の平均待ち時間',\n                '22階の平均待ち時間',\n                '23階の平均待ち時間',\n                '24階の平均待ち時間',\n                '25階の平均待ち時間',\n                '26階の平均待ち時間',\n                '27階の平均待ち時間',\n                '28階の平均待ち時間',\n                '29階の平均待ち時間',\n                '30階の平均待ち時間',\n                '31階の平均待ち時間',\n                '32階の平均待ち時間',\n                '33階の平均待ち時間',\n                '34階の平均待ち時間',\n                '35階の平均待ち時間',\n                '36階の平均待ち時間',\n            ] + elevator_efficiency_header + elevator_ave_header\n            \n    \n    # 階ごとの平均待ち時間\n    ave_time_from_floors = [round(ave, 2) for ave in Universe.view_floors_wait_step.values()]\n    efficiency_from_elevators = [round(eff,2) for eff in Universe.elevator_ride_efficiency_dict.values()]\n    ave_step_from_elevators = [round(ave,2) for ave in Universe.continuous_operating_step_show.values()]\n    \n    data = [\n        sum(Universe.ave_wait_step) / len(Universe.ave_wait_step) # 平均待ち時間\n        ] + ave_time_from_floors + efficiency_from_elevators + ave_step_from_elevators\n    \n    with open('simulation_output.csv', 'w', encoding='UTF8') as f:\n        writer = csv.writer(f)\n    \n        # write the header\n        writer.writerow(header)\n    \n        # write the data\n        writer.writerow(data)\n\n\n",
      "spaces": {
        "tower": {
          "type": "squareGrid",
          "description": "コクーンタワー",
          "history_size": 0,
          "width": 13,
          "height": 36,
          "is_loop": false,
          "layer_count": 1,
          "agents": {
            "user": {
              "description": "ユーザ",
              "history_size": 0,
              "variables": {
                "id": { "default": "0", "description": "ID" },
                "x": { "default": "0", "description": "空間内のX座標" },
                "y": { "default": "0", "description": "空間内のY座標" },
                "direction": { "default": "0", "description": "方向" },
                "layer": {
                  "default": "0",
                  "description": "空間内のレイヤ番号"
                },
                "target_place": { "default": "", "description": "降りる地点" },
                "color": { "default": "", "description": "色" },
                "state": { "default": "", "description": "現在の状態" },
                "wait_step": { "default": "", "description": "" },
                "first_place": { "default": "", "description": "" }
              },
              "source": "def agt_init(self):\n    # 色の指定について\n    # 乗車時：青\n    # 待機時：赤\n    # 目的地到着時：エージェント削除\n    \n    # 学校の場合は２階から\n    # それ以外の建物は１階から\n    # 添え字なので−１なことに注意\n    \n    # usr_bios ランダム、下、上\n    # 出現確率\n    if Universe.user_bias==\"下\" and randint(1,100) <= Universe.bios_late:\n        self.y = 0\n    elif Universe.user_bias == \"上\":\n        self.y = randint(1, get_height_space(Universe.tower)-1)\n    else:\n        self.y = randint(0, get_height_space(Universe.tower)-1)\n    self.x = randint(0,get_width_space(Universe.tower)-1)\n    # 初期ステート\n    self.state = 'wait'\n    self.color = COLOR_RED\n    self.wait_step = 0\n    self.first_place = self.y\n\n    # 目的階を現在階以外でランダムに設定\n    numbers = list(range(0, get_height_space(Universe.tower)-1))\n\n    \n    if Universe.user_bias == \"上\" and randint(1,100) <= Universe.bios_late:\n        self.target_place = 0\n    else:\n        ng = []\n        random_number = random.choice([number for number in numbers if number != self.y and number not in ng])\n        self.target_place = random_number\n\n\n    # 移動中のエージェントの向き\n    if self.y > self.target_place:\n        self.direction = 6\n    else:\n        self.direction = 2\n\n    # ユーザの妥協点に関するデータ群\n    # 妥協値を元にユーザの消滅を行う\n    # もし、妥協値が一定数以上だった場合、このユーザを削除する。\n    # 妥協値は上階段：３　した階段：５\n    if randint(1,100) <=Universe.compromise_ratio and  ((self.direction==6 and abs(self.first_place - self.target_place) < Universe.DOWN) or abs(self.first_place - self.target_place) < Universe.UP):\n        del_agt(self)\n        print(\"歩けそうだから歩く。\")\n        Universe.compromise_count += 1\n        \n    # #  待ち過ぎたエージェントを数える\n    if self.wait_step > (get_height_space(Universe.tower)-1) * 2:\n        Universe.leave_count += 1\n\ndef agt_step(self):\n    \n    if self.state == 'wait':\n         self.wait_step += 1\n    if self.state == 'moving':\n        self.color = COLOR_BLUE\n    else:\n        self.color = COLOR_RED\n  \n\n"
            },
            "elevator": {
              "description": "エレベータ",
              "history_size": 0,
              "variables": {
                "id": { "default": "0", "description": "ID" },
                "x": { "default": "0", "description": "空間内のX座標" },
                "y": { "default": "0", "description": "空間内のY座標" },
                "direction": { "default": "0", "description": "方向" },
                "layer": {
                  "default": "0",
                  "description": "空間内のレイヤ番号"
                },
                "ud_flag": {
                  "default": "",
                  "description": "True: UP, False: Down"
                },
                "UP_DOWN": {
                  "default": "",
                  "description": "アップダウンリスト"
                },
                "user_destinations": {
                  "default": "",
                  "description": "ユーザが行きたい階を登録"
                },
                "capacity": { "default": "", "description": "最大収容人数" },
                "color": { "default": "", "description": "色" },
                "state": {
                  "default": "",
                  "description": "エレベータの稼働状況を表す"
                },
                "call_flag": { "default": "", "description": "呼び出しフラグ" },
                "riding_user": {
                  "default": "",
                  "description": "乗車中のユーザ"
                },
                "stop_count": { "default": "", "description": "停車した回数" },
                "continuous_operating_step": {
                  "default": "",
                  "description": "止まることなく連続で進めたステップ"
                },
                "continuous_flag": {
                  "default": "",
                  "description": "継続運行フラグ"
                }
              },
              "source": "def agt_init(self):\n    # 学校の場合、2階以上。\n    # それ以外の施設の場合、１階から\n    # 添え字なので−１になっていることに注意\n\n    self.y = randint(0, get_height_space(Universe.tower)-1)\n    self.color = COLOR_BLUE # 動いている時、青\n    self.direction = 2 # 上:2 下: 6\n    self.ud_flag = True\n    self.UP_DOWN = [6,2] # True: UP, False: Down\n    # 収容人数\n    self.capacity = 30\n    # 行き先階登録\n    self.user_destinations = set()\n    # 状態\n    self.state = \"stop\"\n    self.call_flag = False\n    self.riding_user = set()\n    \n    # output data init\n    # 停車回数を元に、運行効率を算出する。\n    # 式：　運行効率 = Step / (Step + Stop_Count)\n    self.stop_count = 0 # 停車回数を記録する\n    self.continuous_operating_step = 0\n    self.continuous_flag = False\n    \ndef agt_step(self):\n    \n    # エレベータに誰も乗っていない時 and 待機者がいる時 \n    if (\n        not self.call_flag and\n        len(self.user_destinations) <= 0 and \n        len(self.riding_user) <= 0 and\n        len(Universe.user_set) > 0\n    ):\n        \n        one = randchoice(Universe.user_set) \n        \n        self.call_flag = True\n        self.state = \"moving\"\n        print('呼び出し先', one.y)\n        # 次に進む方向を確定する\n      \n        if self.y > one.y:\n            self.ud_flag = False\n        else:\n            self.ud_flag = True\n        \n    # 最上下の場合、強制的に変更\n    if self.y >= get_height_space(Universe.tower) - 1:\n        self.ud_flag = False\n    elif self.y <= 0:\n        self.ud_flag = True\n            \n    #-------------------------------------------------#\n    # ステップ終了時、共通処理\n    # 方向をセットする\n    if self.state == \"moving\":\n        self.color = COLOR_BLUE\n    else:\n        self.color = COLOR_RED\n    \n\n    self.direction = self.UP_DOWN[self.ud_flag]\n         \n    \n    print(\"***********************************\")\n    print(\"進行中:\")\n    print(\"乗車人数\", len(self.riding_user))\n    print(\"***********************************\")\n  "
            }
          },
          "variables": {},
          "networks": {}
        }
      },
      "agents": {}
    },
    "modules": {},
    "charts": [
      {
        "id": "display_value:0",
        "type": "display_value",
        "name": "平均待ち時間",
        "options": {
          "elements": [
            {
              "id": 0,
              "name": "平均待ち時間",
              "expression": "sum(Universe.ave_wait_step) / len(Universe.ave_wait_step)",
              "decimal_place": 2
            },
            {
              "id": 1,
              "name": "階ごとの平均待ち時間",
              "expression": "Universe.view_floors_wait_step",
              "decimal_place": 2
            }
          ]
        }
      },
      {
        "id": "time:0",
        "type": "time",
        "name": "階層",
        "options": {
          "legend": true,
          "background_color": [255, 255, 255],
          "x_axis": { "label": "ステップ数" },
          "y_axis": {
            "label": "階",
            "min_auto_range": false,
            "max_auto_range": true,
            "step_auto_range": true,
            "min": 0,
            "max": 100,
            "step": 1
          },
          "bezier_curve": false,
          "elements": [
            {
              "id": 0,
              "name": "エレベータ１",
              "point_type": "circle",
              "point_color": [0, 0, 0],
              "point_size": 0,
              "line_color": [0, 0, 0],
              "line_width": 1,
              "expression": "Universe.view_data[0]"
            },
            {
              "id": 1,
              "name": "エレベータ2",
              "point_type": "circle",
              "point_color": [0, 0, 0],
              "point_size": 0,
              "line_color": [0, 0, 0],
              "line_width": 1,
              "expression": "Universe.view_data[1]"
            },
            {
              "id": 2,
              "name": "エレベータ3",
              "point_type": "circle",
              "point_color": [0, 0, 0],
              "point_size": 0,
              "line_color": [0, 0, 0],
              "line_width": 1,
              "expression": "Universe.view_data[2]"
            },
            {
              "id": 3,
              "name": "エレベータ4",
              "point_type": "circle",
              "point_color": [0, 0, 0],
              "point_size": 0,
              "line_color": [0, 0, 0],
              "line_width": 1,
              "expression": "Universe.view_data[3]"
            },
            {
              "id": 4,
              "name": "エレベータ5",
              "point_type": "circle",
              "point_color": [0, 0, 0],
              "point_size": 0,
              "line_color": [0, 0, 0],
              "line_width": 1,
              "expression": "Universe.view_data[4]"
            },
            {
              "id": 5,
              "name": "エレベータ6",
              "point_type": "circle",
              "point_color": [0, 0, 0],
              "point_size": 0,
              "line_color": [0, 0, 0],
              "line_width": 1,
              "expression": "Universe.view_data[5]"
            }
          ]
        }
      },
      {
        "id": "display_value:1",
        "type": "display_value",
        "name": "乗車効率",
        "options": {
          "elements": [
            {
              "id": 0,
              "name": "乗車効率",
              "expression": "Universe.elevator_ride_efficiency_dict",
              "decimal_place": 2
            }
          ]
        }
      },
      {
        "id": "display_value:2",
        "type": "display_value",
        "name": "平均連続稼働時間",
        "options": {
          "elements": [
            {
              "id": 0,
              "name": "平均継続ステップ",
              "expression": "Universe.continuous_operating_step_show",
              "decimal_place": 0
            }
          ]
        }
      },
      {
        "id": "display_value:3",
        "type": "display_value",
        "name": "痺れをきたした人数",
        "options": {
          "elements": [
            {
              "id": 0,
              "name": "痺れをきたした人数",
              "expression": "Universe.leave_count",
              "decimal_place": 0
            },
            {
              "id": 1,
              "name": "妥協した人数",
              "expression": "Universe.compromise_count",
              "decimal_place": 0
            }
          ]
        }
      }
    ],
    "maps": [
      {
        "id": "map:0",
        "name": "タワー",
        "space": "tower",
        "layer": 0,
        "x_axis": { "min": 0, "max": 13 },
        "y_axis": { "min": 0, "max": 36 },
        "legend": true,
        "background_image_type": "fixed",
        "background_image": null,
        "background_image_expression": "",
        "background_color": [255, 255, 255],
        "ruled_line": false,
        "map_type": "chess",
        "origin": "LL",
        "elements": [
          {
            "name": "エレベータ",
            "marker": "square",
            "type": "agent",
            "picture": null,
            "color": {
              "type": "expression",
              "color": [69, 143, 240],
              "gradation": {
                "min": 0,
                "max": 100,
                "min_color": [0, 0, 0],
                "max_color": [0, 0, 0],
                "expression": ""
              },
              "expression": "self.color"
            },
            "agent_type": "elevator",
            "scale": { "type": "fixed", "value": 1, "expression": null },
            "transparency": { "type": "fixed", "value": 0, "expression": null },
            "info": {
              "variable": null,
              "decimal_place": 0,
              "color": [0, 0, 0]
            },
            "line": {
              "variable": null,
              "line_type": "solid",
              "head_type": "none",
              "color": [0, 0, 0]
            },
            "id": 1
          }
        ]
      },
      {
        "id": "map:1",
        "name": "利用者",
        "space": "tower",
        "layer": 0,
        "x_axis": { "min": 0, "max": 13 },
        "y_axis": { "min": 0, "max": 36 },
        "legend": true,
        "background_image_type": "fixed",
        "background_image": null,
        "background_image_expression": "",
        "background_color": [255, 255, 255],
        "ruled_line": false,
        "map_type": "chess",
        "origin": "LL",
        "elements": [
          {
            "name": "ユーザ",
            "marker": "circle",
            "type": "agent",
            "picture": null,
            "color": {
              "type": "expression",
              "color": [0, 0, 0],
              "gradation": {
                "min": 0,
                "max": 100,
                "min_color": [0, 0, 0],
                "max_color": [0, 0, 0],
                "expression": ""
              },
              "expression": "self.color"
            },
            "agent_type": "user",
            "scale": { "type": "fixed", "value": 1, "expression": null },
            "transparency": { "type": "fixed", "value": 0, "expression": null },
            "info": {
              "variable": null,
              "decimal_place": 0,
              "color": [0, 0, 0]
            },
            "line": {
              "variable": null,
              "line_type": "solid",
              "head_type": "none",
              "color": [0, 0, 0]
            },
            "id": 0,
            "marker_image_expression": null
          }
        ]
      }
    ],
    "inputs": [
      {
        "id": "slide_bar:0",
        "name": "エレベータの数",
        "type": "integer",
        "control": "slide_bar",
        "options": {
          "variable": "num_elevator",
          "min": 1,
          "max": 6,
          "step": 1,
          "default": "1"
        }
      },
      {
        "id": "slide_bar:1",
        "name": "１台あたりの最大収容人数",
        "type": "integer",
        "control": "slide_bar",
        "options": {
          "variable": "elevator_capacity",
          "min": 1,
          "max": 100,
          "step": 1,
          "default": "10"
        }
      },
      {
        "id": "slide_bar:2",
        "name": "一度に出現することができる最大の人数",
        "type": "integer",
        "control": "slide_bar",
        "options": {
          "variable": "people",
          "min": 1,
          "max": 20,
          "step": 1,
          "default": "5"
        }
      },
      {
        "id": "slide_bar:3",
        "name": "エージェント出現確率",
        "type": "integer",
        "control": "slide_bar",
        "options": {
          "variable": "agent_prob",
          "min": 1,
          "max": 100,
          "step": 1,
          "default": "1"
        }
      },
      {
        "id": "slide_bar:4",
        "name": "妥協割合",
        "type": "integer",
        "control": "slide_bar",
        "options": {
          "variable": "compromise_ratio",
          "min": 0,
          "max": 100,
          "step": 1,
          "default": "10"
        }
      },
      {
        "name": "ユーザの出現偏り",
        "control": "list",
        "type": "string",
        "options": {
          "variable": "user_bias",
          "candidates": ["\"ランダム\"", "\"下\"", "\"上\""]
        },
        "id": "list:0"
      },
      {
        "name": "偏りの確率",
        "control": "slide_bar",
        "type": "integer",
        "options": {
          "variable": "bios_late",
          "default": "30",
          "min": 0,
          "max": 100,
          "step": 1
        },
        "id": "slide_bar:5"
      }
    ],
    "files": {},
    "simulation": {
      "end_conditions": {
        "steps": 1000,
        "duration_sec": 600,
        "expression": null
      },
      "step_delay_default": 0,
      "step_delay_max": 1000,
      "random_seed": null,
      "server_settings": { "steps": 1 },
      "using_sharedfiles": []
    }
  }
}
